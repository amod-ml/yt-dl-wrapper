#!/bin/bash

# ytdl - A powerful yt-dlp wrapper for downloading videos/audio with transcriptions
# Author: amod-ml
# License: MIT

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default mode
MODE="video"
URL=""
SUB_LANG="en"
OUTPUT_DIR="$HOME/Downloads"

# Function to display help
show_help() {
    cat << EOF
${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}
${GREEN}ytdl${NC} - A powerful yt-dlp wrapper
${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}

${YELLOW}USAGE:${NC}
    ytdl [OPTIONS] [URL]

${YELLOW}OPTIONS:${NC}
    -v, --video    Download video (default mode)
                   Prefers VP9/AV1 codecs, downloads best quality
                   Includes subtitles/transcriptions if available

    -a, --audio    Download audio only
                   Converts to MP3 128kbps format

    -l, --lang     Subtitle language code (default: en)
                   Examples: en, es, fr, de, ja, ko, pt, etc.
                   Use 'all' to download all available languages

    -o, --output   Output directory (default: ~/Downloads)
                   Downloads will be saved to this directory

    -h, --help     Show this help message

${YELLOW}EXAMPLES:${NC}
    ${GREEN}# Download video with English subtitles (default)${NC}
    ytdl https://www.youtube.com/watch?v=dQw4w9WgXcQ
    ytdl -v https://www.youtube.com/watch?v=dQw4w9WgXcQ

    ${GREEN}# Download video with Spanish subtitles${NC}
    ytdl -v -l es https://www.youtube.com/watch?v=dQw4w9WgXcQ

    ${GREEN}# Download video with all available subtitles${NC}
    ytdl -v -l all https://www.youtube.com/watch?v=dQw4w9WgXcQ

    ${GREEN}# Download to custom directory${NC}
    ytdl -o ~/Videos https://www.youtube.com/watch?v=dQw4w9WgXcQ

    ${GREEN}# Download audio as MP3${NC}
    ytdl -a https://www.youtube.com/watch?v=dQw4w9WgXcQ

    ${GREEN}# Interactive mode (prompt for URL)${NC}
    ytdl
    ytdl -a

${YELLOW}FEATURES:${NC}
    ✓ Video and audio download modes
    ✓ Automatic transcription/subtitle download
    ✓ Prefers modern codecs (VP9, AV1)
    ✓ Privacy-focused (no cookies, no cache)
    ✓ MP3 conversion for audio (128kbps)
    ✓ Supports 1000+ websites including:
      YouTube, Facebook, Instagram, TikTok,
      Twitter, Vimeo, Reddit, and many more

${YELLOW}REQUIREMENTS:${NC}
    • yt-dlp
    • ffmpeg

${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}
EOF
    exit 0
}

# Function to print colored messages
print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    
    if ! command -v yt-dlp &> /dev/null; then
        missing_deps+=("yt-dlp")
    fi
    
    if ! command -v ffmpeg &> /dev/null; then
        missing_deps+=("ffmpeg")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        echo ""
        print_info "Install with: paru -S ${missing_deps[*]}"
        exit 1
    fi
}

# Function to validate URL
validate_url() {
    local url="$1"
    
    # Basic URL validation
    if [[ ! "$url" =~ ^https?:// ]]; then
        print_error "Invalid URL format. URL must start with http:// or https://"
        return 1
    fi
    
    return 0
}

# Function to download video
download_video() {
    local url="$1"
    local sub_lang="$2"
    local output_dir="$3"
    
    # Create output directory if it doesn't exist
    mkdir -p "$output_dir"
    
    print_info "Downloading video from: ${BLUE}${url}${NC}"
    print_info "Mode: ${GREEN}VIDEO${NC} (with transcriptions)"
    print_info "Subtitle language: ${YELLOW}${sub_lang}${NC}"
    print_info "Output directory: ${BLUE}${output_dir}${NC}"
    echo ""
    
    # Video format selection prioritizing modern codecs
    # VP9 and AV1 are preferred, fallback to best available
    local format="bestvideo[vcodec^=vp9]+bestaudio/bestvideo[vcodec^=av01]+bestaudio/bestvideo+bestaudio/best"
    
    yt-dlp \
        --format "$format" \
        --write-subs \
        --write-auto-subs \
        --sub-format srt \
        --sub-langs "$sub_lang" \
        --no-cookies \
        --no-cache-dir \
        --output "$output_dir/%(title)s.%(ext)s" \
        --progress \
        --newline \
        "$url"
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo ""
        print_success "Download completed successfully!"
    else
        echo ""
        print_error "Download failed with error code: $exit_code"
        exit $exit_code
    fi
}

# Function to download audio
download_audio() {
    local url="$1"
    local output_dir="$2"
    
    # Create output directory if it doesn't exist
    mkdir -p "$output_dir"
    
    print_info "Downloading audio from: ${BLUE}${url}${NC}"
    print_info "Mode: ${GREEN}AUDIO${NC} (converting to MP3 128kbps)"
    print_info "Output directory: ${BLUE}${output_dir}${NC}"
    echo ""
    
    yt-dlp \
        --format bestaudio/best \
        --extract-audio \
        --audio-format mp3 \
        --audio-quality 128K \
        --no-cookies \
        --no-cache-dir \
        --output "$output_dir/%(title)s.%(ext)s" \
        --progress \
        --newline \
        "$url"
    
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo ""
        print_success "Download completed successfully!"
        print_info "Audio converted to MP3 format (128kbps)"
    else
        echo ""
        print_error "Download failed with error code: $exit_code"
        exit $exit_code
    fi
}

# Function to prompt for URL
prompt_url() {
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}ytdl${NC} - Interactive Mode"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    read -p "$(echo -e ${YELLOW}Enter URL:${NC} )" URL
    
    if [ -z "$URL" ]; then
        print_error "No URL provided"
        exit 1
    fi
}

# Main script starts here
main() {
    # Check dependencies first
    check_dependencies
    
    # Parse command-line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                show_help
                ;;
            -v|--video)
                MODE="video"
                shift
                ;;
            -a|--audio)
                MODE="audio"
                shift
                ;;
            -l|--lang)
                if [[ -n "$2" && "$2" != -* ]]; then
                    SUB_LANG="$2"
                    shift 2
                else
                    print_error "Option -l requires a language code argument"
                    exit 1
                fi
                ;;
            -o|--output)
                if [[ -n "$2" && "$2" != -* ]]; then
                    OUTPUT_DIR="${2/#\~/$HOME}"  # Expand tilde
                    shift 2
                else
                    print_error "Option -o requires a directory path argument"
                    exit 1
                fi
                ;;
            -*)
                print_error "Unknown option: $1"
                echo "Use -h or --help for usage information"
                exit 1
                ;;
            *)
                URL="$1"
                shift
                ;;
        esac
    done
    
    # If no URL provided, prompt for it
    if [ -z "$URL" ]; then
        prompt_url
    fi
    
    # Validate URL
    if ! validate_url "$URL"; then
        exit 1
    fi
    
    # Download based on mode
    case "$MODE" in
        video)
            download_video "$URL" "$SUB_LANG" "$OUTPUT_DIR"
            ;;
        audio)
            download_audio "$URL" "$OUTPUT_DIR"
            ;;
        *)
            print_error "Invalid mode: $MODE"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
